[dataset]
# tensor type (float or double)
tensor_type = float

root_dir  = /home/disk2t/data/JSRT
train_csv = ../JSRT/config/jsrt_train.csv
valid_csv = ../JSRT/config/jsrt_valid.csv
test_csv  = ../JSRT/config/jsrt_test.csv

load_pixelwise_weight = False
# modality number
modal_num = 1

# data transforms
train_transform = [NormalizeWithMeanStd, LabelConvert, RandomCrop, LabelToProbability]
test_transform  = [NormalizeWithMeanStd]

NormalizeWithMeanStd_channels = [0]
NormalizeWithMeanStd_mean = None
NormalizeWithMeanStd_std  = None
NormalizeWithMeanStd_mask = False
NormalizeWithMeanStd_random_fill = False
NormalizeWithMeanStd_inverse     = False

LabelConvert_source_list = [0, 255]
LabelConvert_target_list = [0, 1]
LabelConvert_inverse = False

RandomCrop_output_size = [240, 240]
RandomCrop_foreground_focus = False
RandomCrop_foreground_ratio = None
RandomCrop_mask_label       = None
RandomCrop_inverse     = False

LabelToProbability_class_num = 2
LabelToProbability_inverse   = False

[network]
# this section gives parameters for network
# In this example, a customized network is used.

# type of network
net_type = MyUNet2D

# number of class, required for segmentation task
class_num     = 2
in_chns       = 1
feature_chns  = [4, 16, 24, 32, 48]
dropout       = [0.0, 0.0, 0.3, 0.3, 0.4, 0.5]
bilinear     = True

[training]
# list of gpus
gpus          = [0]
batch_size    = 4
loss_type     = MyFocalDiceLoss
MyFocalDiceLoss_Enable_Pixel_Weight = False
MyFocalDiceLoss_Enable_Class_Weight = True
MyFocalDiceLoss_beta = 1.5
class_weight = [0.2, 1.0]

# for optimizers
optimizer     = Adam
learning_rate = 1e-3
momentum      = 0.9
weight_decay  = 1e-5

# for lr schedular (MultiStepLR)
lr_gamma      = 0.1
lr_milestones = [2000]

ckpt_save_dir    = model/my_net2d
ckpt_save_prefix = my_net2d


# start iter
iter_start = 0
iter_max   = 4000
iter_valid = 100
iter_save  = 2000

[testing]
# list of gpus
gpus       = [0]
batch_size = 4

# checkpoint mode can be [0-latest, 1-best, 2-specified]
ckpt_mode         = 0
output_dir        = result
evaluation_mode   = True
test_time_dropout = False

# use test time augmentation
tta_mode              = 0
infer_sliding_window  = False

# convert the label of prediction output
label_source = [0, 1]
label_target = [0, 255]
