[dataset]
# tensor type (float or double)
tensor_type = float

task_type = seg
root_dir  = ../../PyMIC_data/JSRT
train_csv = config/data/jsrt_train_mix.csv
valid_csv = config/data/jsrt_valid.csv
test_csv  = config/data/jsrt_test.csv

train_batch_size = 8

# data transforms
train_transform = [RandomCrop, RandomFlip, NormalizeWithMeanStd, LabelConvert, LabelToProbability]
valid_transform = [NormalizeWithMeanStd, LabelConvert, LabelToProbability]
test_transform  = [NormalizeWithMeanStd]

RandomCrop_output_size = [224, 224]
RandomCrop_foreground_focus = False
RandomCrop_foreground_ratio = None
Randomcrop_mask_label       = None

RandomFlip_flip_depth  = False
RandomFlip_flip_height = True
RandomFlip_flip_width  = True

NormalizeWithMeanStd_channels = [0]

LabelConvert_source_list = [0, 255]
LabelConvert_target_list = [0, 1]

[network]
# this section gives parameters for network
# the keys may be different for different networks

# type of network
net_type = UNet2D

# number of class, required for segmentation task
class_num     = 2
in_chns       = 1
feature_chns  = [16, 32, 64, 128, 256]
dropout       = [0,  0,  0.3, 0.4, 0.5]
bilinear      = False
deep_supervise= False

[training]
# list of gpus
gpus = [0]

loss_type     = CrossEntropyLoss

# for optimizers
optimizer     = Adam
learning_rate = 1e-3
momentum      = 0.9
weight_decay  = 1e-5

# for lr schedular
lr_scheduler  = ReduceLROnPlateau
lr_gamma      = 0.5
ReduceLROnPlateau_patience = 2000

ckpt_save_dir    = model/unet_trinet
ckpt_prefix      = trinet

# start iter
iter_start = 0
iter_max   = 10000
iter_valid = 100
iter_save  = [10000]

[noisy_label_learning]
nll_method   = TriNet
trinet_select_ratio = 0.9
rampup_start = 1000
rampup_end   = 8000

[testing]
# list of gpus
gpus       = [0]

# checkpoint mode can be [0-latest, 1-best, 2-specified]
ckpt_mode         = 0
output_dir        = result/unet_trinet

# convert the label of prediction output
label_source = [0, 1]
label_target = [0, 255]
