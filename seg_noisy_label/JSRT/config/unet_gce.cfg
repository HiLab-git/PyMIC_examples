[dataset]
# tensor type (float or double)
tensor_type    = float
task_type      = seg
supervise_type = fully_sup

train_dir = ../../PyMIC_data/JSRT
train_csv = config/data/jsrt_train_mix.csv
valid_csv = config/data/jsrt_valid.csv
test_csv  = config/data/jsrt_test.csv

train_batch_size = 8

# data transforms
train_transform = [RandomCrop, RandomFlip, NormalizeWithMeanStd, LabelConvert, LabelToProbability]
valid_transform = [NormalizeWithMeanStd, LabelConvert, LabelToProbability]
test_transform  = [NormalizeWithMeanStd]

RandomCrop_output_size = [224, 224]
RandomCrop_foreground_focus = False
RandomCrop_foreground_ratio = None
Randomcrop_mask_label       = None

RandomFlip_flip_depth  = False
RandomFlip_flip_height = True
RandomFlip_flip_width  = True

NormalizeWithMeanStd_channels = [0]

LabelConvert_source_list = [0, 255]
LabelConvert_target_list = [0, 1]

[network]
# type of network
net_type = UNet2D

# number of class, required for segmentation task
class_num     = 2
in_chns       = 1
feature_chns  = [16, 32, 64, 128, 256]
dropout       = [0,  0,  0.3, 0.4, 0.5]
up_mode       = 2
multiscale_pred = False

[training]
# list of gpus
gpus = [0]

loss_type     = GeneralizedCELoss

# for optimizers
optimizer     = Adam
learning_rate = 1e-3
momentum      = 0.9
weight_decay  = 1e-5

# for lr schedular  # runb, no scheduler
lr_scheduler  = ReduceLROnPlateau
lr_gamma      = 0.5
ReduceLROnPlateau_patience = 2000

ckpt_save_dir    = model/unet_gce
ckpt_prefix      = unet_gce

iter_max   = 10000
iter_valid = 200
iter_save  = [10000]

[testing]
# list of gpus
gpus       = [0]

# checkpoint mode can be [0-latest, 1-best, 2-specified]
ckpt_mode         = 0
output_dir        = result/unet_gce

# convert the label of prediction output
label_source = [0, 1]
label_target = [0, 255]
